[alias]

  # common shortcuts
  co = checkout
  ci = commit
  br = !$HOME/.dotfiles/git/scripts/branch-list.sh
  sh = stash
  cp = cherry-pick
  st = status
  pu = !git push -u origin HEAD # Push Upstream

  # less common shortcuts
  bi = bisect
  s = status -sb
  ren = branch -m
  p = pull --ff-only
  ds = diff --staged
  wip = commit -m "WIP" --no-verify

  gc = !git maintenance run --task=gc
  mstart = !git maintenance start
  mstop = !git maintenance stop

  ls-gone = "!git branch -vv | grep 'origin/.*: gone]' | awk '{print $1}'"
  rm-gone = !$HOME/.dotfiles/git/scripts/rm-gone-branches.sh

  # list branches sorted by last modified
  b = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"

  # remove all local tags
  rm-tags = "!f() { git tag | xargs git tag -d; }; f"

  # Push only if no WIP commit messages
  psh = "!f() { git cherry -v | grep WIP >/dev/null; \
          if [ $? -eq 0 ]; \
            then \
              printf '\\033[1;31m [psh] Commit message contains ''WIP''. Consider rewriting commit message, or use ''git push'' to bypass \n\\033[0m'; \
            else \
              printf '\\033[1;32m [psh] Pushing \n\\033[0m'; \
              git push; \
          fi; }; f"

  # CheckOut Latest Tag
  colt = "!git checkout $(git describe --abbrev=0 --tags)"

  # rebase
  pfwl = "!f() { git cherry -v | grep WIP >/dev/null; \
            if [ $? -eq 0 ]; \
              then \
                printf '\\033[1;31m [pfwl] Commit message contains ''WIP''. Consider rewriting commit message, or use ''git push --force-with-lease'' to bypass \n\\033[0m'; \
              else \
                printf '\\033[1;32m [pfwl] Pushing force-with-lease \n\\033[0m'; \
                git push --force-with-lease; \
            fi; }; f"

  preb = pull --rebase
  rc = -c core.editor=true rebase --continue
  ri = rebase --interactive
  amend = commit --amend --no-edit
  rms = "!f() { : git branch ; if [ -z $(git status --porcelain) ]; \
                                  then \
                                    git fetch; \
                                    if [ -z $(git log @..@{u}) ]; \
                                    then \
                                      local localIdShort=$(git rev-parse --short --verify @); \
                                      echo \"\\033[1;33m [rms] Rebasing and merge-squashing onto ${1-origin/main}\n [rms] To undo rms, execute 'git reset --hard $localIdShort' \\033[0m\"; \
                                      git reset --hard ${1-origin/main}; \
                                      git merge --squash HEAD@{1}; \
                                      git commit --no-verify --no-edit; \
                                    else \
                                      echo '\\033[1;31m [rms] Local branch is behind. Pull changes to avoid losing work and try again. \\033[0m'; \
                                    fi; \
                                  else \
                                    echo '\\033[1;31m [rms] Dirty working tree and/or index. Stash, commit or discard your changes and try again. \\033[0m'; \
                                  fi; \
                                  }; f" #RebaseMergeSquash onto origin/main or $1

  # merge/diff
  men = merge --no-edit # MErgeNoedit
  conflicts = diff --name-only --diff-filter=U
  dt = difftool
  mt = mergetool
  mergetest = "!f(){ : git branch ; if [[ -z $(git status --porcelain) ]]; then git fetch; git merge --no-commit --no-ff \"${1-origin/main}\" | grep CONFLICT; if [ $? == 0 ]; then echo -e \"\\033[1;31m [mergetest] Merge with ${1-origin/main} will conflict \\033[0m\"; else echo -e \"\\033[1;32m [mergetest] Merge with ${1-origin/main} has no conflicts \\033[0m\"; fi; git merge --abort; else echo -e \"\\033[1;31m [mergetest] Dirty working tree and/or index. Stash, commit or discard your changes and try again. \\033[0m\"; fi; }; f " # "Dry-run" merge towards origin/main or $1

  hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short

  # log
  lg = log --color --graph --pretty=format:'%Cred%h%Creset%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%C(magenta)\\ [%cn]" --decorate --date=relative -n 35
  authors = "!git log --format='%cN <%cE>' | sort -u"

  # diff last commit
  dlc = diff --cached HEAD^

  # UnMergedCommits
  umc = "!f() { : git branch ; echo -e \"\\033[1;33m [umc] Commits in this branch, that are not in ${1-origin/main} \\033[0m\"; git cherry -v ${1-origin/main}; }; f"

  # Find String (git fs my-string -- my-file)
  fs = "!git log --source --all -S"

  # list aliases
  la = "!git config -l | grep alias | cut -c 7-"

  # reset commands
  uncommit = reset --soft HEAD^
  r = reset
  r1 = reset HEAD^
  r2 = reset HEAD^^
  rh1 = reset HEAD^ --hard
  rh2 = reset HEAD^^ --hard
  # rh = "!f() { : git branch ; local localIdShort=$(git rev-parse --short --verify @); \
  #                                 if [ -z $(git status --porcelain) ]; \
  #                                 then \
  #                                   git fetch; \
  #                                   git reset --hard ${1-\"@{u}\"}; \
  #                                   printf \"\\033[1;33m [rh] Resetting hard to ${1-\"@{u}\"}. Previous commit: $localIdShort \\033[0m\"; \
  #                                 else \
  #                                   printf \"\\033[1;31m [rh] Dirty working tree and/or index. Continue? \\033[0m\"; \
  #                                   read -r response; \
  #                                   if [ $response =~ [yY](es)* ]; \
  #                                     then \
  #                                       git reset --hard ${1-\"@{u}\"}; \
  #                                       printf \"\\033[1;33m [rh] Resetting hard to ${1-\"@{u}\"}. Previous commit: $localIdShort \\033[0m\"; \
  #                                   fi; \
  #                                 fi; \
  #                                 }; f"
  #   rhx = "!f() { : git branch ; local localIdShort=$(git rev-parse --short --verify @); \
  #       if [ -z \"$(git status --porcelain)\" ]; then \
  #           git fetch; \
  #           git reset --hard ${1-\"@{u}\"}; \
  #       fi; \
  #   }; f"
  unstage = "!f() { git reset HEAD -- ${1-\".\"}; }; f" # Unstage all files or $1
  move-staged = "!bash -c \"git stash-staged;git commit -m \"temp\" --no-verify; git stash; git reset --hard HEAD^; git stash pop\""
  stash-staged = "!bash -c \"git stash --keep-index; git stash push -m \"staged\" --keep-index; git stash pop stash@{1}\""

  # stash
  sl = stash list
  sa = stash apply
  ss = stash save

  # config
  whoami = "!f(){ echo -n 'Name:  '; git config --get user.name; echo -n 'Email: '; git config --get user.email; }; f"
  iam = "!f(){ if [ -z "$2" ]; then git iam-prompt; else git config user.name \"$1\"; git config user.email \"$2\"; fi; }; f"
  iam-prompt = "!f(){ git amnesia; echo -n 'Name (without quotes): '; read name; git config user.name \"$name\"; echo -n 'Email: '; read email; git config user.email \"$email\"; }; f"
  amnesia = config --remove-section user

  # remotes
  disable-push = "!f() { git remote set-url --push $1 no_push; }; f" # Remove push from remote $1

  # misc
  ignored = ls-files --others --i --exclude-standard
  todo = grep -i -n -e TODO -e FIXME -e OPTIMIZE
  resign = "!re() { git rebase --exec 'git commit --amend --no-edit -n -S' -i $1; }; re" # Recommit commits up to (excluding) $1, and sign them
