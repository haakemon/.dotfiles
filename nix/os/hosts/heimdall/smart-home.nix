# Auto-generated using compose2nix v0.3.1.
{ config, pkgs, lib, ... }:
let
  tz = "Europe/Oslo";
in
{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."homeassistant" = {
    image = "ghcr.io/home-assistant/home-assistant:2024.10.1@sha256:f881515cefc888b91a0098cb64a22fa586aa863562aa07dcf9b87546bad5623f";
    environment = {
      "TIME_ZONE" = tz;
      "TZ" = tz;
    };
    volumes = [
      "${config.configOptions.userHome}/data/homeassistant:/config:rw"
    ];
    ports = [
      "127.0.0.1:8123:8123/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network=host"
    ];
  };
  systemd.services."podman-homeassistant" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-smart-home-root.target"
    ];
    wantedBy = [
      "podman-compose-smart-home-root.target"
    ];
  };
  virtualisation.oci-containers.containers."zigbee2mqtt" = {
    image = "koenkk/zigbee2mqtt:1.40.2@sha256:40dca7e6ee816c84d6220daeb92cf20a52cf35446ec1d3ef0c2965a87cd397cc";
    environment = {
      "TIME_ZONE" = tz;
      "TZ" = tz;
    };
    volumes = [
      "${config.configOptions.userHome}/data/zigbee2mqtt/data:/app/data:rw"
      "/run/udev:/run/udev:ro"
    ];
    ports = [
      "127.0.0.1:8089:8089/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--device=/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0:/dev/ttyACM0:rwm"
      "--network=host"
    ];
  };
  systemd.services."podman-zigbee2mqtt" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-smart-home-root.target"
    ];
    wantedBy = [
      "podman-compose-smart-home-root.target"
    ];
  };
  virtualisation.oci-containers.containers."zwavejs2mqtt" = {
    image = "zwavejs/zwavejs2mqtt:9.21.1@sha256:fc35636b769850381567e6e7e4151b934017578f14d78b3fdafa0138d59c5dc7";
    environment = {
      "TIME_ZONE" = tz;
      "TZ" = tz;
    };
    volumes = [
      "${config.configOptions.userHome}/data/zwavejs2mqtt/store:/usr/src/app/store:rw"
    ];
    ports = [
      "127.0.0.1:3000:3000/tcp"
      "127.0.0.1:8091:8091/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--device=/dev/serial/by-id/usb-0658_0200-if00:/dev/ttyACM0:rwm"
      "--network=host"
    ];
  };
  systemd.services."podman-zwavejs2mqtt" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-smart-home-root.target"
    ];
    wantedBy = [
      "podman-compose-smart-home-root.target"
    ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-smart-home-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
